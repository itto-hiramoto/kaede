import std.io

pub extern "C" fn abort()

pub enum Option<T> {
    Some(T),
    None,
}

impl<T> Option<T> {
    pub fn unwrap(self): T {
        return match self {
            Option::Some(value) => value,
            Option::None => {
                std.io.eputs("Error: Attempted to unwrap a None value\n")
                abort()
                __unreachable()
            }
        }
    }
}
